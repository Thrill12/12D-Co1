PROCEDURE merge_sort(items)
   
    ' Base case for recursion:
    ' The recursion will stop when the list has been divided into single items
    IF LEN(items) < 2 THEN 
	RETURN
    ELSE
        midpoint = (LEN(items) - 1) DIV 2  ' Calculate midpoint
        left_half = items[0:midpoint]  ' Create left half list
        right_half = items[midpoint+1:LEN(items)-1]  ' Create right half list

        merge_sort(left_half)  ' Recursive call on left half
        merge_sort(right_half)  ' Recursive call on right half
        
        merge(items, left_half, right_half)  ' Call procedure to merge both halves
    ENDIF 

ENDPROCEDURE 

PROCEDURE merge (merged, list_1, list_2)

    index_1 = 0  ' list_1 current position
    index_2 = 0  ' list_2 current position
    index_merged = 0  ' Merged current position

    ' While there are still items to merge        
    WHILE index_1 < LEN(list_1) AND index_2 < LEN(list_2)
        
        ' Find the lowest of the two items being compared 
        ' and add it to the new list
        IF list_1[index_1] < list_2[index_2] THEN
            merged[index_merged] = list_1[index_1]
            index_1 = index_1 + 1
        ELSE
            merged[index_merged] = list_2[index_2]
            index_2 = index_2 + 1
        ENDIF 
        index_merged = index_merged + 1
    ENDWHILE 

    ' Add to the merged list any remaining data from list_1
    WHILE index_1 < len(list_1)
        merged[index_merged] = list_1[index_1] 
        index_1 = index_1 + 1
        index_merged = index_merged + 1
    ENDWHILE
        
    ' Add to the merged list any remaining data from list_2
    WHILE index_2 < len(list_2)
        merged[index_merged] = list_2[index_2]
        index_2 = index_2 + 1
        index_merged = index_merged + 1
    ENDWHILE

ENDPROCEDURE